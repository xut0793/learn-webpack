const htmlWebpackPlugin = {
  tags: {
    headTags: [
      {
        tagName: 'script',
        voidTag: false,
        meta: { plugin: 'html-webpack-plugin' },
        attributes: { defer: true, src: 'main%407d2eac7c.js' },
      },
    ],
    bodyTags: [],
  },
  files: { publicPath: '', js: ['main%407d2eac7c.js'], css: [] },
  options: {
    template:
      'E:\\develop\\learn-webpack\\node_modules\\html-webpack-plugin\\lib\\loader.js!E:\\develop\\learn-webpack\\html-demo\\index-template.ejs',
    templateContent: false,
    filename: 'index.html',
    publicPath: 'auto',
    hash: false,
    inject: 'head',
    scriptLoading: 'defer',
    compile: true,
    favicon: false,
    minify: 'auto',
    cache: true,
    showErrors: true,
    chunks: 'all',
    excludeChunks: [],
    chunksSortMode: 'auto',
    meta: {},
    base: false,
    title: 'Webpack App',
    xhtml: false,
  },
};

const webpackConfig = {
  cache: false,
  context: 'E:\\develop\\learn-webpack\\html-demo',
  devtool: false,
  entry: { main: { import: ['./index.js'] } },
  experiments: {
    topLevelAwait: false,
    syncWebAssembly: false,
    asyncWebAssembly: false,
    outputModule: false,
  },
  externalsPresets: {
    web: true,
    node: false,
    nwjs: false,
    electron: false,
    electronMain: false,
    electronPreload: false,
    electronRenderer: false,
  },
  externalsType: 'var',
  infrastructureLogging: { level: 'info', debug: false },
  loader: { target: 'web' },
  mode: 'none',
  module: {
    unsafeCache: false,
    parser: {
      javascript: {
        unknownContextRequest: '.',
        unknownContextRegExp: false,
        unknownContextRecursive: true,
        unknownContextCritical: true,
        exprContextRequest: '.',
        exprContextRegExp: false,
        exprContextRecursive: true,
        exprContextCritical: true,
        wrappedContextRegExp: {},
        wrappedContextRecursive: true,
        wrappedContextCritical: false,
        strictExportPresence: false,
        strictThisContextOnImports: false,
      },
      asset: { dataUrlCondition: { maxSize: 8096 } },
    },
    generator: {},
    defaultRules: [
      { type: 'javascript/auto' },
      { mimetype: 'application/node', type: 'javascript/auto' },
      { test: {}, type: 'json' },
      { mimetype: 'application/json', type: 'json' },
      {
        test: {},
        type: 'javascript/esm',
        resolve: { byDependency: { esm: { fullySpecified: true } } },
      },
      {
        test: {},
        descriptionData: { type: 'module' },
        type: 'javascript/esm',
        resolve: { byDependency: { esm: { fullySpecified: true } } },
      },
      { test: {}, type: 'javascript/dynamic' },
      {
        test: {},
        descriptionData: { type: 'commonjs' },
        type: 'javascript/dynamic',
      },
      {
        mimetype: { or: ['text/javascript', 'application/javascript'] },
        type: 'javascript/esm',
        resolve: { byDependency: { esm: { fullySpecified: true } } },
      },
      { dependency: 'url', type: 'asset/resource' },
    ],
    rules: [],
  },
  node: { global: true, __filename: 'mock', __dirname: 'mock' },
  optimization: {
    runtimeChunk: false,
    splitChunks: {
      defaultSizeTypes: ['javascript', 'unknown'],
      cacheGroups: {
        default: {
          idHint: '',
          reuseExistingChunk: true,
          minChunks: 2,
          priority: -20,
        },
        defaultVendors: {
          idHint: 'vendors',
          reuseExistingChunk: true,
          test: {},
          priority: -10,
        },
      },
      hidePathInfo: false,
      chunks: 'async',
      usedExports: true,
      minChunks: 1,
      minSize: 10000,
      enforceSizeThreshold: 30000,
      maxAsyncRequests: null,
      maxInitialRequests: null,
      automaticNameDelimiter: '-',
    },
    emitOnErrors: true,
    removeAvailableModules: false,
    removeEmptyChunks: true,
    mergeDuplicateChunks: true,
    flagIncludedChunks: false,
    moduleIds: 'natural',
    chunkIds: 'natural',
    sideEffects: 'flag',
    providedExports: true,
    usedExports: false,
    innerGraph: false,
    mangleExports: false,
    concatenateModules: false,
    checkWasmTypes: false,
    mangleWasmImports: false,
    portableRecords: false,
    realContentHash: false,
    minimize: false,
    minimizer: [{}],
    nodeEnv: false,
  },
  output: {
    assetModuleFilename: '[hash][ext][query]',
    charset: true,
    chunkFilename: '[name]@[hash:8].js',
    chunkFormat: 'array-push',
    chunkLoading: 'jsonp',
    chunkLoadingGlobal: 'webpackChunk',
    chunkLoadTimeout: 120000,
    clean: true,
    compareBeforeEmit: true,
    crossOriginLoading: false,
    devtoolNamespace: '',
    environment: {
      arrowFunction: true,
      const: true,
      destructuring: true,
      forOf: true,
    },
    enabledChunkLoadingTypes: ['jsonp', 'import-scripts'],
    enabledLibraryTypes: [],
    enabledWasmLoadingTypes: ['fetch'],
    filename: '[name]@[hash:8].js',
    globalObject: 'self',
    hashDigest: 'hex',
    hashDigestLength: 20,
    hashFunction: 'md4',
    hotUpdateChunkFilename: '[id].[fullhash].hot-update.js',
    hotUpdateGlobal: 'webpackHotUpdate',
    hotUpdateMainFilename: '[runtime].[fullhash].hot-update.json',
    iife: true,
    importFunctionName: 'import',
    importMetaName: 'import.meta',
    scriptType: false,
    module: false,
    path: 'E:\\develop\\learn-webpack\\html-demo\\bundle-options',
    pathinfo: false,
    publicPath: 'auto',
    sourceMapFilename: '[file].map[query]',
    strictModuleExceptionHandling: false,
    uniqueName: '',
    wasmLoading: 'fetch',
    webassemblyModuleFilename: '[hash].module.wasm',
    workerChunkLoading: 'import-scripts',
    workerWasmLoading: 'fetch',
  },
  parallelism: 100,
  performance: false,
  plugins: [
    { options: { configPath: {}, helpfulOutput: true }, logger: {} },
    {
      userOptions: { template: './index-template.ejs' },
      version: 5,
      options: {
        template: './index-template.ejs',
        templateContent: false,
        filename: 'index.html',
        publicPath: 'auto',
        hash: false,
        inject: 'head',
        scriptLoading: 'defer',
        compile: true,
        favicon: false,
        minify: 'auto',
        cache: true,
        showErrors: true,
        chunks: 'all',
        excludeChunks: [],
        chunksSortMode: 'auto',
        meta: {},
        base: false,
        title: 'Webpack App',
        xhtml: false,
      },
    },
  ],
  profile: false,
  recordsInputPath: false,
  recordsOutputPath: false,
  resolve: {
    byDependency: {
      wasm: {
        conditionNames: ['import', 'module', '...'],
        extensions: ['.js', '.json', '.wasm'],
        aliasFields: ['browser'],
        mainFields: ['browser', 'module', '...'],
      },
      esm: {
        conditionNames: ['import', 'module', '...'],
        extensions: ['.js', '.json', '.wasm'],
        aliasFields: ['browser'],
        mainFields: ['browser', 'module', '...'],
      },
      worker: {
        conditionNames: ['import', 'module', '...'],
        extensions: ['.js', '.json', '.wasm'],
        aliasFields: ['browser'],
        mainFields: ['browser', 'module', '...'],
        preferRelative: true,
      },
      commonjs: {
        conditionNames: ['require', 'module', '...'],
        extensions: ['.js', '.json', '.wasm'],
        aliasFields: ['browser'],
        mainFields: ['browser', 'module', '...'],
      },
      amd: {
        conditionNames: ['require', 'module', '...'],
        extensions: ['.js', '.json', '.wasm'],
        aliasFields: ['browser'],
        mainFields: ['browser', 'module', '...'],
      },
      loader: {
        conditionNames: ['require', 'module', '...'],
        extensions: ['.js', '.json', '.wasm'],
        aliasFields: ['browser'],
        mainFields: ['browser', 'module', '...'],
      },
      unknown: {
        conditionNames: ['require', 'module', '...'],
        extensions: ['.js', '.json', '.wasm'],
        aliasFields: ['browser'],
        mainFields: ['browser', 'module', '...'],
      },
      undefined: {
        conditionNames: ['require', 'module', '...'],
        extensions: ['.js', '.json', '.wasm'],
        aliasFields: ['browser'],
        mainFields: ['browser', 'module', '...'],
      },
      url: { preferRelative: true },
    },
    cache: false,
    modules: ['node_modules'],
    conditionNames: ['webpack', 'production', 'browser'],
    mainFiles: ['index'],
    extensions: [],
    aliasFields: [],
    exportsFields: ['exports'],
    roots: ['E:\\develop\\learn-webpack\\html-demo'],
    mainFields: ['main'],
  },
  resolveLoader: {
    cache: false,
    conditionNames: ['loader', 'require', 'node'],
    exportsFields: ['exports'],
    mainFields: ['loader', 'main'],
    extensions: ['.js'],
    mainFiles: ['index'],
  },
  snapshot: {
    resolveBuildDependencies: { timestamp: true, hash: true },
    buildDependencies: { timestamp: true, hash: true },
    resolve: { timestamp: true },
    module: { timestamp: true },
    immutablePaths: [],
    managedPaths: ['E:\\develop\\learn-webpack\\node_modules'],
  },
  stats: { preset: 'normal', colors: true },
  target: 'web',
  watch: false,
  watchOptions: {},
};
